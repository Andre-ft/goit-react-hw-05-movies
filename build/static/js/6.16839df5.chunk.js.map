{"version":3,"sources":["services/movie-api.js","components/MoviesPage/MoviesPage.module.css","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","components/MoviesList/MoviesList.js","components/MoviesPage/MoviesPage.js"],"names":["API_KEY","BASE_URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchCast","movieId","fetchTrendingMovies","fetchMovieById","fetchReviews","fetchMoviesByQuery","query","page","module","exports","Searchbar","onSubmit","useState","setQuery","className","s","event","preventDefault","trim","toast","error","SearchForm","type","SearchForm_button","SearchForm_button_label","SearchForm_input","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","defaultProps","MoviesList","list","useRouteMatch","location","useLocation","map","movie","to","pathname","id","state","from","label","title","MoviesPage","setList","history","useHistory","getQueryFromSearchParams","URLSearchParams","search","get","useEffect","console","log","moviesAPI","then","res","results","push","style","maxWidth","margin","newQuery","autoClose"],"mappings":"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","file":"static/js/6.16839df5.chunk.js","sourcesContent":["// const BASE_URL = 'http://localhost:4040';\nconst API_KEY = \"9f0e1a5db1805e19173b01041df22dc3\";\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\n\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nexport function fetchCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMoviesByQuery(query, page = 1) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?query=${query}&page=${page}&api_key=${API_KEY}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoviesPage\":\"MoviesPage_MoviesPage__3_xj_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__3aBQ8\",\"SearchForm\":\"Searchbar_SearchForm__t5Z3s\",\"SearchForm_button\":\"Searchbar_SearchForm_button__1j47W\",\"SearchForm_button_label\":\"Searchbar_SearchForm_button_label__3o230\",\"SearchForm_input\":\"Searchbar_SearchForm_input__3qVNL\"};","import React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport s from './Searchbar.module.css';\nimport PropTypes from 'prop-types';\n\n// class Searchbar extends Component {\nfunction Searchbar({onSubmit}){\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = event => {\n    setQuery(event.currentTarget.value.toLowerCase() );\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (query.trim() === '') {\n      toast.error('Input query.');\n      return;\n    }\n\n    onSubmit(query);\n    // setQuery('');\n  };\n\n    return (\n      <header className={s.Searchbar}>\n        <form onSubmit={handleSubmit} className={s.SearchForm}>\n          <button type=\"submit\" className={s.SearchForm_button}>\n            <span className={s.SearchForm_button_label}>Search</span>\n          </button>\n\n          <input\n            className={s.SearchForm_input}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n        </form>\n      </header>\n    );\n}\n\nexport default Searchbar;\n\nSearchbar.defaultProps = {\n  onSubmit: () => null,\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import {\r\n  NavLink,\r\n  Link,\r\n  Route,\r\n  useRouteMatch,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\n\r\nexport default function MoviesList({ list }) {\r\n  const { url } = useRouteMatch(); //используется для динамического определения текущего url\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <ul>\r\n      {list.map((movie) => (\r\n        <li key={movie.id}>\r\n          <Link\r\n            to={{\r\n              pathname: `${url}/${movie.id}`,\r\n              state: { from: { location, label: \"Back to Movies search\" } },\r\n            }}\r\n          >\r\n            {movie.title}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import s from \"./MoviesPage.module.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Searchbar from \"../Searchbar\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\nimport MoviesList from \"../MoviesList/MoviesList\";\r\nimport * as moviesAPI from \"../../services/movie-api\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nfunction MoviesPage() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [list, setList] = useState(null);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const getQueryFromSearchParams =\r\n    new URLSearchParams(location.search).get(\"query\") ?? \"\";\r\n\r\n  const handleFormSubmit = (newQuery) => {\r\n    // console.log(query);\r\n    setQuery(newQuery);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuery(getQueryFromSearchParams);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"query\", query);\r\n    if (query.trim() === \"\") return;\r\n    moviesAPI.fetchMoviesByQuery(query).then((res) => setList(res.results));\r\n    history.push({ ...location, search: `query=${query}` });\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"list\", list);\r\n  }, [list]);\r\n\r\n  return (\r\n    <div className={s.MoviesPage} style={{ maxWidth: 1170, margin: \"0 auto\" }}>\r\n      <Searchbar onSubmit={handleFormSubmit} />\r\n      {list && <MoviesList list={list} />}\r\n      {/* <ImageGallery query={query} getImageURL={getActiveImageURL} /> */}\r\n      {/* {activeImageURL && (\r\n        <Modal onClose={toggleModal} imageURL={activeImageURL}>\r\n          <img src={activeImageURL} alt={query} />\r\n        </Modal>\r\n      )} */}\r\n\r\n      <ToastContainer autoClose={3000} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoviesPage;\r\n"],"sourceRoot":""}